=Quick Sort=

Quick sort is a divide and conquer algorithm. It uses a pivot element and partitions the input around the pivot.
There are several ways to implement quick sort depending on where you placethe pivot.  Typically a random pivot is chosen.
The key process in quick sort is the partition. The goal of the partition is to place the element being partition on in
the correct spot in the array, with all element greater coming after, and elements less coming before. This should be done
in linear time.

*Time Complexity*: O(N^2^)
*Space Complexity*: O(log(n))
[[Glossary#Stable|Stable]]: No
*In Place*: Yes (Although this is argued)
*Pros*: Quick sort has an average case of O(n log(n)) and generally works well with real world data. Considered in place.
*Cons*: Not stable, recursively implementation. Poor performance on sorted arrays.

Quick sort generally follows these 4 steps:

1. If the range has less than 2 elements, return as there is nothing to do
2. Otherwise, pick a value called pivot. The method here varies but can be random or predetermined.
3. Partition the range by reordering elements less than the pivot to the left, and greater than the pivot to the right.
4. Recursively apply the quicksort to te subrange before and after the pivot.

[[Examples#Quick Sort|Python 3 Example]]

Helpful links:
https://www.geeksforgeeks.org/quick-sort/
